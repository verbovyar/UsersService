// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	domain "MiddleApp/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(name, surname string, age uint32) (error, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, surname, age)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(name, surname, age interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), name, surname, age)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id uint32) (error, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// Read mocks base method.
func (m *MockRepository) Read() []*domain.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]*domain.User)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockRepositoryMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRepository)(nil).Read))
}

// Update mocks base method.
func (m *MockRepository) Update(id uint32, name, surname string, age uint32) (error, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name, surname, age)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(id, name, surname, age interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), id, name, surname, age)
}
